'use strict';var React = require('react');var ReactNative = require('react-native');var Icon = require('react-native-vector-icons/Ionicons');var request = require('../common/request');var config = require('../common/config');var Detail = require('./detail');var Edit = require("../edit/index");var {    StyleSheet,    Text,    View,    ListView,    TouchableHighlight,    Image,    Dimensions,    ActivityIndicatorIOS,    RefreshControl,    AlertIOS} = ReactNative;var width = Dimensions.get('window').width;var cachedResults = {    nextPage: 1,    items: [],    total: 0};//列表页中子项组件var Item = React.createClass({    getInitialState() {        var row = this.props.row;        return {            row: row,            up: row.voted        }    },    _up(){        var that = this;        var up = !this.state.up,            row = this.state.row,            url = config.api.base + config.api.up,            body = {                id: row._id,                up: up ? 'yes' : 'no',                accessToken: 'abc'            };        request.post(url, body)            .then(function (data) {                if (data && data.success) {                    that.setState({                        up: up                    })                } else {                    AlertIOS.alert("点赞失败，稍后重试")                }            })            .catch(function (err) {                console.log(err);                AlertIOS.alert("点赞失败，稍后重试")            })    },    render(){        var row = this.state.row;        return (            <TouchableHighlight onPress={this.props.onSelect}>                <View style={styles.item}>                    <Text style={styles.title}>{row.title}</Text>                    <Image                        source={{uri: row.thumb}}                        style={styles.thumb}                    >                        <Icon                            name='ios-play'                            size={28}                            style={styles.play}                        />                    </Image>                    <View style={styles.itemFooter}>                        <View style={styles.handleBox}>                            <Icon                                name={ this.state.up ? 'ios-heart' : "ios-heart-outline"}                                size={28}                                onPress={this._up}                                style={[styles.up, this.state.up ? null : styles.down]}                            />                            <Text style={styles.handleText} onPress={this._up}>喜欢</Text>                        </View>                        <View style={styles.handleBox}>                            <Icon                                name="ios-chatboxes-outline"                                size={28}                                style={styles.commentIcon}                            />                            <Text style={styles.handleText}>喜欢</Text>                        </View>                    </View>                </View>            </TouchableHighlight>        )    }});//列表页组件var List = React.createClass({    getInitialState() {        var ds = new ListView.DataSource({            rowHasChanged: (r1, r2) => r1 !== r2        });        return {            isLoadingTail: false,            isRefreshing: false,            dataSource: ds.cloneWithRows([])        }    },    renderRow(row) {        return <Item            row={row}            key={row._id}            onSelect={() => this._loadPage(row)}        />    },    //初始化加载数据    componentDidMount() {        this._fetchData(1)    },    //发送请求获取列表数据    _fetchData(page) {        var that = this;        if (page !== 0) {            this.setState({                isLoadingTail: true            });        } else {            this.setState({                isRefreshing: true            });        }        request.get(config.api.base + config.api.creations, {            accountToken: 'abc',            page: page        })            .then((data) => {                if (data.success) {                    var items = cachedResults.items.slice();                    if (page !== 0) {                        items = items.concat(data.data);                        cachedResults.nextPage += 1;                    } else {                        items = data.data.concat(items);                    }                    cachedResults.items = items;                    cachedResults.total = data.total;                    setTimeout(function () {                        if (page !== 0) {                            that.setState({                                dataSource: that.state.dataSource.cloneWithRows(cachedResults.items),                                isLoadingTail: false                            })                        } else {                            that.setState({                                dataSource: that.state.dataSource.cloneWithRows(cachedResults.items),                                isRefreshing: false                            })                        }                    }, 1000);                }            })            .catch((error) => {                if (page !== 0) {                    this.setState({                        isLoadingTail: false                    });                } else {                    this.setState({                        isRefreshing: false                    });                }                console.error(error);            });    },    //判断是否还有数据未显示    _hasMore(){        return cachedResults.items.length !== cachedResults.total    },    //下滑加载更多数据    _fetchMoreData(){        if (!(this._hasMore() || this.state.isLoadingTail)) {            return;        }        var page = cachedResults.nextPage;        this._fetchData(page);    },    //下拉加载数据动画效果    _renderFooter(){        if (!this._hasMore() && cachedResults.total != 0) {            return (                <View style={styles.loadingMore}>                    <Text style={styles.loadingMoreText}>没有更多了</Text>                </View>            )        }        return <ActivityIndicatorIOS style={styles.loadingMore}/>    },    //下拉刷新数据    _onRefresh(){        if (this.state.isRefreshing || !this._hasMore()) {            return        }        this._fetchData(0);    },    //点击子项跳转加载页面    _loadPage(row){        this.props.navigator.push({            name: 'detail',            component: Detail,            params: {                data: row            }        })    },    render(){        return (            <View style={styles.container}>                <View style={styles.header}>                    <Text style={styles.headerTitle}>列表页面</Text>                </View>                <ListView                    dataSource={this.state.dataSource}                    renderRow={this.renderRow}                    renderFooter={this._renderFooter}                    enableEmptySections={true}                    onEndReached={this._fetchMoreData}                    refreshControl={                        <RefreshControl                            refreshing={this.state.isRefreshing}                            onRefresh={this._onRefresh}                        />                    }                    onEndReachedThreshold={20}                    showsVerticalScrollIndicator={false}                    automaticallyAdjustContentInsets={false}                />            </View>        )    }});const styles = StyleSheet.create({    container: {        flex: 1,        backgroundColor: '#F5FCFF',    },    header: {        paddingTop: 25,        paddingBottom: 12,        backgroundColor: '#ee735c'    },    headerTitle: {        color: '#fff',        fontSize: 16,        textAlign: 'center',        fontWeight: '600'    },    item: {        width: width,        marginBottom: 10,        backgroundColor: '#fff'    },    thumb: {        width: width,        height: width * 0.56,        resizeMode: 'cover'    },    title: {        padding: 10,        fontSize: 18,        color: '#333'    },    itemFooter: {        flexDirection: 'row',        justifyContent: 'space-between',        backgroundColor: '#eee'    },    handleBox: {        padding: 10,        flexDirection: 'row',        width: width / 2 - 0.5,        justifyContent: 'center',        backgroundColor: '#fff'    },    play: {        position: 'absolute',        bottom: 14,        right: 14,        width: 46,        height: 46,        paddingTop: 9,        paddingLeft: 18,        backgroundColor: 'transparent',        borderColor: '#fff',        borderRadius: 23,        color: '#ed7b66',        borderWidth: 1    },    handleText: {        paddingLeft: 12,        fontSize: 18,        color: '#333'    },    up: {        fontSize: 22,        color: '#ed7b66'    },    down: {        fontSize: 22,        color: '#333'    },    commentIcon: {        fontSize: 22,        color: '#333'    },    loadingMore: {        marginVertical: 20    },    loadingMoreText: {        color: '#777',        textAlign: 'center'    }});module.exports = List;